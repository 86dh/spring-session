buildscript {
	ext {
		releaseBuild = version.endsWith('RELEASE')
		snapshotBuild = version.endsWith('SNAPSHOT')
		milestoneBuild = !(releaseBuild || snapshotBuild)
	}

	repositories {
		gradlePluginPortal()
		maven { url 'https://repo.spring.io/plugins-release/' }
        maven {
            url = 'https://repo.spring.io/plugins-snapshot'
            if (project.hasProperty('artifactoryUsername')) {
                credentials {
                    username "$artifactoryUsername"
                    password "$artifactoryPassword"
                }
            }
        }
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
	}
}

apply plugin: 'io.spring.convention.root'
apply plugin: 'org.springframework.security.update-dependencies'

group = 'org.springframework.session'
description = 'Spring Session'

subprojects {
	apply plugin: 'io.spring.javaformat'

	plugins.withType(JavaPlugin) {
		sourceCompatibility = JavaVersion.VERSION_17
	}

	tasks.withType(Test) {
		useJUnitPlatform()
	}
}

nohttp {
    source.exclude "buildSrc/build/**"
	source.exclude "spring-session-docs/.gradle/nodejs/**"
	source.exclude "spring-session-docs/modules/ROOT/examples/**/build/**"
}

tasks.named("updateDependencies") {
	// we aren't Gradle 8 compatible yet
	checkForGradleUpdate = false
}

updateDependenciesSettings {
	gitHub {
		organization = "spring-projects"
		repository = "spring-session"
	}
	dependencyExcludes {
		majorVersionBump()
		minorVersionBump()
		alphaBetaVersions()
		snapshotVersions()
	}
	setFiles({
		return [
				project.file("gradle/dependency-management.gradle"),
				project.file("buildSrc/src/main/groovy/io/spring/gradle/convention/CheckstylePlugin.groovy")
		]
	})
}
